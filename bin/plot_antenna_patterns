#! /usr/bin/python
import matplotlib
matplotlib.use("agg")
import matplotlib.pyplot as plt
from seispy.recoverymap import RecoveryMap
from seispy.utils import orfs, set_channel_vector
from seispy.station import homestake, spiral
import optparse
import numpy as np

def parse_command_line():
    parser = optparse.OptionParser()
    parser.add_option(
            "--recovery-string", "-s", help="recovery string", default='p',
            type=str, dest='recovery_string')
    parser.add_option(
        "--velocity", "-v", help="velcoity of wave", default=5700,
            type=float, dest='velocity')
    parser.add_option(
            "--epsilon", help="epsilon", default=0.1,
            type=float, dest='epsilon')
    parser.add_option(
            "--alpha", help="alpha", default=1000,
            type=float, dest='alpha')
    parser.add_option(
            "--theta-mesh", help="theta mesh", default=6,
            type=int, dest='theta_mesh')
    parser.add_option(
            "--phi-mesh", help="phi mesh", default=6,
            type=int, dest='phi_mesh')
    parser.add_option(
        "--frequency", "-f", help="recovery frequency", default=1,
            type=float, dest='freq')
    params, args = parser.parse_args()
    return params


def main(params):
    station_locs = homestake()
    #station_locs = spiral(1)
    stations = station_locs.keys()
    channels = ['HHE', 'HHN', 'HHZ']
    thetas = np.arange(params.theta_mesh, 180 + params.theta_mesh, params.theta_mesh) * np.pi / 180.
    phis = np.arange(params.phi_mesh, 360 + params.phi_mesh, params.phi_mesh) * np.pi / 180.
    # loop over stations and channels
    g = np.zeros((phis.size, thetas.size), dtype=complex)
    ct = 0
    for ii, station1 in enumerate(stations):
        for jj, station2 in enumerate(stations):
            for kk, chan1 in enumerate(channels):
                for ll, chan2 in enumerate(channels):
                    if jj < ii:
                        # we don't double count stations
                        continue
                    if ll < kk:
                        # don't double count channels
                        continue
                    else:
                        ct += 1
                        if params.recovery_string[0] is 's':
                            g1, g2, g1_s, g2_s = orfs.orf_picker(params.recovery_string[0], set_channel_vector(channels[kk]),
                                                            set_channel_vector(channels[ll]),
                                                            station_locs[station1],
                                                            station_locs[station2],
                                                            params.velocity,
                                                            float(params.freq), thetas=thetas, phis=phis
                                                            )
                            if params.recovery_string[1] is '1':
                                g += g1.reshape(g1_s)
                            else:
                                g += g2.reshape(g2_s)
                        else:
                            g1, g_s = orfs.orf_picker(params.recovery_string, set_channel_vector(channels[kk]),
                                                     set_channel_vector(channels[ll]), station_locs[station1],
                                                     station_locs[station2],
                                                     params.velocity, float(params.freq), thetas=thetas, phis=phis,
                                                     epsilon=params.epsilon, alpha=params.alpha)

                            g += g1.reshape(g_s)
    data = RecoveryMap(np.abs(g)/ct, thetas, phis, params.recovery_string)
    if params.recovery_string is 'r':
        plt.figure()
        plt.title('Average r-wave sensitivity for all potential pairs at %4.2f'
                  % params.freq, fontsize=12)
        ax = plt.gca()
        ax.set_ylabel('Average $|\gamma|$ value for %d pairs' % ct, fontsize=16)
        ax.set_xlabel('$\phi$')
        plt.plot(phis * (180/np.pi), data.data)
        plt.savefig('%s-wave_sensitivity' % params.recovery_string)
    else:
        plot = data.plot(contour=False)
        ax = plot.gca()
        ax.set_title('Average %s-wave sensitivity at %4.2f Hz'
                  % (params.recovery_string, params.freq), fontsize=12)
        ax.set_xlabel(r'$\phi$')
        ax.set_ylabel(r'$\theta$')
        # grab colorbar and change
        # its label
        cbars = plot.colorbars
        for cbar in cbars:
            cbar.set_label('Average $|\gamma|$ value for %d pairs' % ct, fontsize=16)
        plot.savefig('%s-wave_sensitivity' % params.recovery_string)

if __name__=='__main__':
    params = parse_command_line()
    main(params)
